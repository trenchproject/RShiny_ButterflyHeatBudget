token = "MpEroBAcjEIOFDbJdJxErtjmbEnLVtbq",
startdate = Sys.Date() - 2,
enddate = Sys.Date() - 2,
datatypeid = "TMAX")
packages <- c("shiny", "magrittr", "ggplot2", "dplyr", "leaflet", "ggmap", "maps", "raster", "sp", "rgdal", "viridis", "shinythemes", "shinyWidgets", "shinycssloaders", "shinyjs", "colorRamps", "sortable", "rnoaa", "chillR", "reshape2", "rasterVis", "tidyr", "gridExtra", "shinyBS", "gridExtra", "ggmap")
package.check <- lapply(
packages,
FUN = function(x) {
if (!require(x, character.only = TRUE)) {
install.packages(x, dependencies = TRUE)
library(x, character.only = TRUE)
}
}
)
lapply(packages, library, character.only = TRUE)
tmax <- ncdc(datasetid = 'GHCND',
stationid = "GHCND:USC00051959",
token = "MpEroBAcjEIOFDbJdJxErtjmbEnLVtbq",
startdate = Sys.Date() - 2,
enddate = Sys.Date() - 2,
datatypeid = "TMAX")
tmin <- ncdc(datasetid = 'GHCND',
stationid = "GHCND:USC00051959",
token = "MpEroBAcjEIOFDbJdJxErtjmbEnLVtbq",
startdate = Sys.Date() - 2,
enddate = Sys.Date() - 2,
datatypeid = "TMIN")
object.size(tmax)
temp <- as.data.frame(tmax$data) %>% dplyr::select(date, value) %>%
set_colnames(c("date", "Tmax")) %>%
cbind(as.data.frame(tmin$data) %>% dplyr::select(value) %>% set_colnames("Tmin"))
temp
temp[c(2,3)] <- temp[c(2,3)] / 10
temp
temp
diurnal_temp_variation_sine=function(T_max, T_min, t){
W=pi/12;
gamma= 0.44 - 0.46* sin(0.9 + W * t)+ 0.11 * sin(0.9 + 2 * W * t);   # (2.2) diurnal temperature function
T = T_max*gamma + T_min * (1 - gamma)
return(T)
}
diurnal_temp_variation_sine(temp$Tmax, temp$Tmin, c(0:23))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
tmax <- ncdc(datasetid = 'GHCND',
stationid = "GHCND:USC00051959",
token = "MpEroBAcjEIOFDbJdJxErtjmbEnLVtbq",
startdate = Sys.Date() - 2,
enddate = Sys.Date() - 2,
datatypeid = "TMAX")
tmax
tmax$meta
tmax$data
tmax$data - 1
tmax$data$value
shiny::runApp()
tmax <- ncdc(datasetid = 'GHCND',
stationid = "GHCND:USC00051959",
token = "MpEroBAcjEIOFDbJdJxErtjmbEnLVtbq",
startdate = Sys.Date() - 2,
enddate = Sys.Date() - 2,
datatypeid = "TMAX")
tmax
tmax <- ncdc(datasetid = 'GHCND',
stationid = "GHCND:USC00051959",
token = "MpEroBAcjEIOFDbJdJxErtjmbEnLVtbq",
startdate = Sys.Date() - 3,
enddate = Sys.Date() - 3,
datatypeid = "TMAX")
tmax
x <- 3
tmax <- ncdc(datasetid = 'GHCND',
stationid = "GHCND:USC00051959",
token = "MpEroBAcjEIOFDbJdJxErtjmbEnLVtbq",
startdate = Sys.Date() - x,
enddate = Sys.Date() - x,
datatypeid = "TMAX")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
zenith <- zenith_angle(doy = day_of_year(Sys.Date() - x), lat = 38.9, lon = -107.0, hour = c(0:23))
Tb_butterfly=function(T_a, Tg, Tg_sh, u, H_sdir, H_sdif, z, D, delta, alpha, r_g=0.3, shade=FALSE){
TaK= T_a+273.15 #ambient temperature in K
TaK_sh=TaK
Tg= Tg+273.15 #ground surface temperature in K
Tg_sh= Tg_sh+273 #shaded ground surface temperature in K
u= u *100;  #u- wind speed, convert m/s to cm/s
H_sdir=H_sdir/10 #divide by ten to convert W/m2 to mW/cm2
H_sdif=H_sdif/10 #divide by ten to convert W/m2 to mW/cm2
#Total solar radiation
H_sttl= H_sdir + H_sdif
#Butterfly Parameters
delta<- delta/10     #delta- thoracic fur thickness, cm
epsilon_s=0.97; #surface emisivity, ranges from 0.95-1
sigma= 5.67*10^-9; #Stefan-Boltzman constant, mW cm^-2 K^04 or 5.67*10^-8 W m-2 K-4
Ep=1; #Ep- butterfly thermal emissivity
k_e= 1.3; #k_e- thermal conductivity of the fur, 1.3mWcm^-1*K^-1
r_i=0.15; #r_i- body radius #Kingsolver 1983
k_a=0.25; #approximate thermal conductivity of air, mWcm^-1*K^-1
v=15.68*10^-2  #cm^2/s, kinematic viscocity of air,  at 300K http://www.engineeringtoolbox.com/air-absolute-kinematic-viscosity-d_601.html
#---------------------------------------------
#Areas, cm^2
#Calculate total surface area as area of cylinder without ends
A_sttl= pi*D*2 #2 in length  #cm^2
#For butterflies basking with wings perpendicular to radiation
##A_s,dir, A_s,ref, A_s,ttl- direct, reflected, and total solar radiative heat transfer surface areas
A_sdir= A_sttl/2
A_sref=A_sdir
#RADIATIVE HEAT FLUx, mW
Q_s= alpha*A_sdir*H_sdir/cos(z*pi/180)+alpha*A_sref*H_sdif+alpha*r_g*A_sref*H_sttl
#---------------------------------------------
#THERMAL RADIATIVE FLUX
#Tsky=0.0552*(TaK)^1.5; #Kelvin, black body sky temperature from Swinbank (1963),
Tsky= (1.22*T_a -20.4)+273.15 #K, Gates 1980 Biophysical ecology based on Swnback 1960, Kingsolver (1983) estimates using Brunt equation
#Q_t= 0.5* A_sttl * Ep * sigma * (Tb^4 - Tsky^4) +0.5* A_sttl * Ep * sigma * (Tb^4 - Tg^4)
#---------------------------------------------
# CONVECTIVE HEAT FLUX
#Reynolds number- ratio of interval viscous forces
R_e=u*D/v
#Nusselt number- dimensionless conductance
N_u=0.6*R_e^0.5
#N_u=2.3; #Kingsolver 1983;
h_c=N_u*k_a/D;
h_T=(1/h_c+(r_i+delta)*log((r_i+delta)/r_i)/k_e)^-1;  # h_T- total convective heat tranfer coefficient
#A_c=A_sttl; #A_c- convective heat transfer surface area
#Q_c= h_T* A_c* (Tb-T_a);
#---------------------------------------------
#HEAT BUDGET
# Kingsolver 1983
#Q_s- total radiative heat flux; Q_t- thermal radiative heat flux; Q_c- convective heat flux
#Q_s=Q_t + Q_c;
#ADJUST PARAMETERS IF SHADE
if(shade==TRUE){
#Calculate without basking by dividing areas by two
A_sttl=A_sttl/2
#RADIATIVE HEAT FLUX IN SHADE, mW
A_sdir= A_sttl/2
A_sref=A_sdir;
H_sdir_sh= 0; #No direct radiation
H_sdif_sh= H_sdif
H_sttl= H_sdif + H_sdif_sh #only diffuse and reflected
Q_s= alpha*A_sdir*H_sdir_sh/cos(z*pi/180)+alpha*A_sref*H_sdif_sh+alpha*r_g*A_sref*H_sttl;
Tg= Tg_sh #use shaded surface temperature if shade
}
#t solved in wolfram alpha #Solve[a t^4 +b t -d, t]
a<- A_sttl * Ep *sigma
b<-h_T * A_sttl
d<- h_T*A_sttl*TaK +0.5*A_sttl * Ep *sigma*Tsky^4 +0.5*A_sttl * Ep *sigma*(Tg)^4 +Q_s
{Te=1/2*sqrt((2*b)/(a*sqrt((sqrt(3)*sqrt(256*a^3*d^3+27*a^2*b^4)+9*a*b^2)^(1/3)/(2^(1/3)*3^(2/3)*a)-(4*(2/3)^(1/3)*d)/(sqrt(3)*sqrt(256*a^3*d^3+27*a^2*b^4)+9*a*b^2)^(1/3)))-(sqrt(3)*sqrt(256*a^3*d^3+27*a^2*b^4)+9*a*b^2)^(1/3)/(2^(1/3)*3^(2/3)*a)+(4*(2/3)^(1/3)*d)/(sqrt(3)*sqrt(256*a^3*d^3+27*a^2*b^4)+9*a*b^2)^(1/3))-1/2*sqrt((sqrt(3)*sqrt(256*a^3*d^3+27*a^2*b^4)+9*a*b^2)^(1/3)/(2^(1/3)*3^(2/3)*a)-(4*(2/3)^(1/3)*d)/(sqrt(3)*sqrt(256*a^3*d^3+27*a^2*b^4)+9*a*b^2)^(1/3)) }
#IMPROVE SOLUTION?
return(Te-273.15)
}
diurnal_temp_variation_sine=function(T_max, T_min, t){
W=pi/12;
gamma= 0.44 - 0.46* sin(0.9 + W * t)+ 0.11 * sin(0.9 + 2 * W * t);   # (2.2) diurnal temperature function
T = T_max*gamma + T_min * (1 - gamma)
return(T)
}
zenith_angle=function(doy, lat, lon, hour, offset=NA){
lat=lat*pi/180 #to radians
RevAng = 0.21631 + 2 * atan(0.967 * tan(0.0086 * (-186 + doy))); # Revolution angle in radians
DecAng = asin(0.39795 * cos(RevAng));                            # Declination angle in radians
f=(279.575+0.9856*doy)  # f in degrees as a function of day of year, p.169 Campbell & Norman 2000
f=f*pi/180 #convert f in degrees to radians
ET= (-104.7*sin (f)+596.2*sin (2*f)+4.3*sin (3*f)-12.7*sin (4*f)-429.3*cos (f)-2.0*cos (2*f)+19.3*cos (3*f))/3600   # (11.4) Equation of time: ET is a 15-20 minute correction which depends on calendar day
lon[lon<0]=360+lon[lon<0] #convert to 0 to 360
LC= 1/15*(lon%%15) # longitude correction, 1/15h for each degree of standard meridian
LC[LC>0.5]= LC[LC>0.5]-1
t_0 = 12-LC-ET # solar noon
#Check if offset is as expected. (Is the timezone of the location the same as that of the meridian
#that's within 7.5 degrees from that location?)
lon[lon>180]=lon[lon>180]-360
if (!is.na(offset)) {
offset_theory <- as.integer(lon / 15) + lon / abs(lon) * as.integer(abs(lon) %% 15 / 7.5)
t_0 = t_0 - offset_theory + offset
}
cos.zenith= sin(DecAng)*sin(lat) + cos(DecAng)*cos(lat)*cos(pi/12*(hour-t_0)); #cos of zenith angle in radians
zenith=acos(cos.zenith)*180/pi # zenith angle in degrees
zenith[zenith>90]=90 # if measured from the vertical psi can't be greater than pi/2 (90 degrees)
return(zenith)
}
day_of_year<- function(day, format="%Y-%m-%d"){
day=  as.POSIXlt(day, format=format)
return(as.numeric(strftime(day, format = "%j")))
}
zenith <- zenith_angle(doy = day_of_year(Sys.Date() - x), lat = 38.9, lon = -107.0, hour = c(0:23))
zenith
Tb_butterfly(T_a=25, Tg=25, Tg_sh=20, u=0.4, H_sdir=300, H_sdif=100, z=zenith, D=0.36, delta=1.46, alpha=0.6, r_g=0.3)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
example("<family name>", "shinyBS", ask = FALSE)
example("Buttons", "shinyBS", ask = FALSE)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(diurnal_temp_variation_sine)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
x <- 2
tmax <- ncdc(datasetid = 'GHCND',
stationid = "GHCND:USC00051959",
token = "MpEroBAcjEIOFDbJdJxErtjmbEnLVtbq",
startdate = Sys.Date() - x,
enddate = Sys.Date() - x,
datatypeid = "TMAX")
tmax
dim(tmax)
x <- 4
tmax <- ncdc(datasetid = 'GHCND',
stationid = "GHCND:USC00051959",
token = "MpEroBAcjEIOFDbJdJxErtjmbEnLVtbq",
startdate = Sys.Date() - x,
enddate = Sys.Date() - x,
datatypeid = "TMAX")
dim(tmax)
length(tmax)
x <- 2
tmax <- ncdc(datasetid = 'GHCND',
stationid = "GHCND:USC00051959",
token = "MpEroBAcjEIOFDbJdJxErtjmbEnLVtbq",
startdate = Sys.Date() - x,
enddate = Sys.Date() - x,
datatypeid = "TMAX")
length(tmax)
tmax$data
dim(tmax$data)
x <- 4
tmax <- ncdc(datasetid = 'GHCND',
stationid = "GHCND:USC00051959",
token = "MpEroBAcjEIOFDbJdJxErtjmbEnLVtbq",
startdate = Sys.Date() - x,
enddate = Sys.Date() - x,
datatypeid = "TMAX")
dim(tmax$data)
runApp()
x <- 0
t <- 0
while(t == 0) {
x <- x + 1
tmax <- ncdc(datasetid = 'GHCND',
stationid = "GHCND:USC00051959",
token = "MpEroBAcjEIOFDbJdJxErtjmbEnLVtbq",
startdate = Sys.Date() - x,
enddate = Sys.Date() - x,
datatypeid = "TMAX")
t <- dim(tmax$data)[1]
}
t
tmax <- ncdc(datasetid = 'GHCND',
stationid = "GHCND:USC00051959",
token = "MpEroBAcjEIOFDbJdJxErtjmbEnLVtbq",
startdate = Sys.Date() - x,
enddate = Sys.Date() - x,
datatypeid = "TMAX")
tmin <- ncdc(datasetid = 'GHCND',
stationid = "GHCND:USC00051959",
token = "MpEroBAcjEIOFDbJdJxErtjmbEnLVtbq",
startdate = Sys.Date() - x,
enddate = Sys.Date() - x,
datatypeid = "TMIN")
zenith <- zenith_angle(doy = day_of_year(Sys.Date() - x), lat = 38.9, lon = -107.0, hour = c(0:23))
x <- 1
t <- 0
while(t == 0) {
x <- x + 1
tmax <- ncdc(datasetid = 'GHCND',
stationid = "GHCND:USC00051959",
token = "MpEroBAcjEIOFDbJdJxErtjmbEnLVtbq",
startdate = Sys.Date() - x,
enddate = Sys.Date() - x,
datatypeid = "TMAX")
t <- dim(tmax$data)[1]
}
tmax
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
log10
log(10)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
HTML("<b>Solar radiative</b>",
"<br> &alpha; &times; A<sub>s,dir</sub> &times; H<sub>s,dir</sub> &times; cos(z) +
&alpha; &times; A<sub>s,ref</sub> &times; H<sub>s,dif</sub> + &alpha; &times; r<sub>g</sub> &times; A<sub>s,ref</sub> &times; H<sub>s,total</sub>",
"<br> = ", input$abs, "&times;(&pi; &times;", input$diam / 10, ") &times;", dir, "&times; cos(", round(zenith[hour+1], digits = 1), "°) + ", input$abs, "&times;(&pi; &times;", input$diam / 10, ")", "&times; ",
dif, "+ ", input$abs, "&times; 0.3 &times; (&pi; &times;", input$diam / 10, ") &times;", (dir + dif),
"<br> =", round(abs * (A / 2) * dir * cos(zenith[hour+1] * pi / 180) +
abs * (A / 2) * dif + abs * 0.3 * (A / 2) * (dir + dif), digits = 1),
"<br><b>Thermal radiative</b>",
"<br> 0.5A<sub>t</sub> &times; &epsilon;&sigma;(T<sub>b</sub><sup>4</sup> - T<sub>sky</sub><sup>4</sup>) +
0.5A<sub>t</sub> &times; &epsilon;&sigma;(T<sub>b</sub><sup>4</sup> - T<sub>g</sub><sup>4</sup>)",
"<br> = 0.5 &times; (&pi; &times;", input$diam / 10, ") &times; 1 &times; (5.67 &times; 10<sup>-9</sup>) &times; ((", body, " + 273.15)<sup>4</sup> - ((1.22 &times; ", air, " - 20.4) + 273.15)<sup>4</sup>) +
0.5 &times; (&pi; &times;", input$diam / 10, ") &times; 1 &times; (5.67 &times; 10<sup>-9</sup>) &times; ((", body, " + 273.15)<sup>4</sup> - (", air + input$ground, "+ 273.15)<sup>4</sup>)
<br> =", round(0.5 * A * 1 * (5.67 * 10^-9) * (btemp^4 - Tsky^4) +
0.5 * A * 1 * (5.67 * 10^-9) * (btemp^4 - (atemp + input$ground)^4), digits = 1),
"<br><b>Convective</b>",
"<br> (1 / (0.6 &times; (uD / &nu;)<sup>0.5</sup>) &times; k<sub>a</sub> / D + (r<sub>i</sub> + &delta;) &times; log((r<sub>i</sub> + &delta;) / r<sub>i</sub>) / k<sub>e</sub>)<sup>-1</sup> &times; A<sub>c</sub> (T<sub>b</sub> - T<sub>a</sub>)
<br> = (1 / (0.6 &times; (", input$wind, "&times; ", D, "/ 15.68 &times; 10<sup>-2</sup>)<sup>0.5</sup>) &times; 0.25 / ", D,
"+ (0.15 + ", input$fur, ") &times; ln((0.15 +", input$fur, ")/1.3)<sup>-1</sup> &times; (&pi; &times;", D, ") &times; (", body, "-", air, ")
<br> = ", round((1 / h_c + (0.15 + fur) * log((0.15 + fur) / 0.15) / 1.3)^-1 * A * (btemp - atemp), digits = 1)
)
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages(c("dashboardthemes", "plotly", "rnoaa", "shiny", "shinyBS", "shinycssloaders", "shinydashboard", "shinyjs", "shinyWidgets"))
shiny::runApp()
runApp()
shiny::runApp()
packages.install('rnoaa')
install.packages("rnoaa")
runApp()
install.packages("rnoaa")
runApp('~/Desktop/research/Climate-Change-Metabolism')
runApp('~/Desktop/research/Introduction-to-Graphs')
setwd("~/Desktop/research/RShiny_ButterflyHeatBudget")
runApp('~/Desktop/research/Introduction-to-Graphs')
runApp('~/Desktop/research/Introduction-to-Graphs')
runApp('~/Desktop/research/Introduction-to-Graphs')
runApp('~/Desktop/research/Introduction-to-Graphs')
runApp('~/Desktop/research/Introduction-to-Graphs')
runApp('~/Desktop/research/Introduction-to-Graphs')
runApp('~/Desktop/research/Introduction-to-Graphs')
runApp('~/Desktop/research/Introduction-to-Graphs')
runApp()
install.packages("https://cran.r-project.org/src/contrib/rgdal_0.9-1.tar.gz", repos = NULL, type="source", configure.args = "--with-gdal-config=/Library/Frameworks/GDAL.framework/Versions/1.10/unix/bin/gdal-config --with-proj-include=/Library/Frameworks/PROJ.framework/unix/include --with-proj-lib=/Library/Frameworks/PROJ.framework/unix/lib")
library('rnoaa')
remotes::install_github("ropensci/rnoaa")
runApp()
runApp('~/Desktop/research/Climate-Change-Metabolism')
runApp('~/Desktop/research/Climate-Change-Metabolism')
runApp()
shiny::runApp('~/Desktop/research/Introduction-to-Graphs')
runApp('~/Desktop/research/Climate-Change-Metabolism')
runApp()
runApp('~/Desktop/research/ClimateBiology/ClimateBiology')
runApp('~/Desktop/research/ClimateBiology/ClimateBiology')
install.packages("reshape2")
runApp('~/Desktop/research/ClimateBiology/ClimateBiology')
runApp('~/Desktop/research/ClimateBiology/ClimateBiology')
runApp('~/Desktop/research/ClimateBiology/ClimateBiology')
runApp('~/Desktop/research/ClimateBiology/ClimateBiology')
runApp('~/Desktop/research/ClimateBiology/ClimateBiology')
runApp('~/Desktop/research/ClimateBiology/ClimateBiology')
shiny::runApp('~/Desktop/research/Rshiny_ButterflyMuseumSpecimens')
runApp()
runApp('~/Desktop/research/Rshiny_ButterflyMuseumSpecimens')
runApp('~/Desktop/research/Rshiny_ButterflyMuseumSpecimens')
runApp('~/Desktop/research/Rshiny_ButterflyMuseumSpecimens')
runApp('~/Desktop/research/Rshiny_ButterflyMuseumSpecimens')
runApp('~/Desktop/research/Rshiny_ButterflyMuseumSpecimens')
runApp('~/Desktop/research/Rshiny_ButterflyMuseumSpecimens')
runApp('~/Desktop/research/Rshiny_ButterflyMuseumSpecimens')
runApp('~/Desktop/research/Rshiny_ButterflyMuseumSpecimens')
runApp('~/Desktop/research/Rshiny_ButterflyMuseumSpecimens')
runApp('~/Desktop/research/Rshiny_ButterflyMuseumSpecimens')
runApp('~/Desktop/research/RShiny_PlantPhenology')
runApp('~/Desktop/research/RShiny_PlantPhenology')
runApp('~/Desktop/research/RShiny_PlantPhenology')
runApp('~/Desktop/research/RShiny_PlantPhenology')
runApp('~/Desktop/research/RShiny_PlantPhenology')
runApp('~/Desktop/research/RShiny_PlantPhenology')
runApp('~/Desktop/research/RShiny_PlantPhenology')
---
title: "include.md"
runApp('~/Desktop/research/RShiny_PlantPhenology')
runApp('~/Desktop/research/RShiny_PlantPhenology')
runApp('~/Desktop/research/RShiny_RMBL-phenology')
shiny::runApp('~/Desktop/research/RShiny_RMBL-phenology')
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
shiny::runApp()
